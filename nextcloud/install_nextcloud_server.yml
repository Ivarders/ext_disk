---
- name: Установка и настройка сервера NextCloud
  hosts: all
  become: true
  vars:
      # INPUT - Пароль для БД
      POSTGRES_PASSWORD: "{{POSTGRES_PASSWORD}}"
      # INPUT - UUID внешнего диска
      UUID_EXTERNAL_DISK: "{{UUID_EXTERNAL_DISK}}"
      #
      #
      POSTGRES_USER: "nextcloud"
      POSTGRES_DB: "{{ POSTGRES_USER }}"
      PATH_NEXTCLOUD_CONF: "/home/nextcloud"
      PATH_TO_EXTERNAL: "/mnt/extdisk"
      PATH_NEXTCLOUD_DATA: "{{ PATH_TO_EXTERNAL }}/nextcloud"
      NAME_WIREGUARD_CONF: nextcloudserver
      PATH_TO_DOCKER_COMPOSE_FILE: "{{ PATH_NEXTCLOUD_CONF }}/conf"
  tasks:
      # - name: Добавить автомотнирование внешнего диска 
      #   when: UUID_EXTERNAL_DISK
      #   block:
      #       - name: Создание точки монтирования
      #         file:
      #             path: "{{ PATH_TO_EXTERNAL }}"
      #             state: directory
      #             mode: "0755"

      #       - name: Проверка наличия записи в /etc/fstab
      #         command: grep -q '^UUID=.*\s+{{ PATH_TO_EXTERNAL }}\s+.*$' /etc/fstab
      #         changed_when: false
      #         register: fstab_entry_check

      #       - name: Замена или создание записи в /etc/fstab
      #         lineinfile:
      #           path: /etc/fstab
      #           line: "UUID={{UUID_EXTERNAL_DISK}}   {{ PATH_TO_EXTERNAL }}   auto   defaults   1   0"
      #         when: fstab_entry_check.rc != 0
              
      #       - name: Замена записи в /etc/fstab
      #         replace:
      #             path: /etc/fstab
      #             regexp: "^UUID=.*\s+{{PATH_TO_EXTERNAL}}\s+.*$"
      #             replace: "UUID={{UUID_EXTERNAL_DISK}}   {{PATH_TO_EXTERNAL}}   auto   defaults   1   0"

      #       - name: Выполнить монтирование
      #         command: mount -a

      #       - name: Проверка успешного монтирования
      #         command: ls "{{ PATH_TO_EXTERNAL }}"
      #         changed_when: false
      #         ignore_errors: yes
      #         when: mount_result.changed

      - name: Настройка WireGuard
        tags: wireguard
        block:
            - name: Обновление apt
              apt:
                  update_cache: yes

            - name: Установка WireGuard-tools
              apt:
                  name:
                      # Не устаналивайте "wireguard" он ломает доступ в интернет. Устанавливайте "wireguard-tools"
                      - wireguard-tools
                  state: present

            - name: Скопировать конфигурацию для WireGuard
              synchronize:
                  src: "../self_config/{{ NAME_WIREGUARD_CONF }}.conf"
                  dest: "/etc/wireguard"
                  delete: yes

            - name: Запустить WireGuard
              systemd:
                  name: "wg-quick@{{ NAME_WIREGUARD_CONF }}"
                  state: started
                  enabled: yes

      - name: Копировать конфигурации для запуска NextCloud
        block:
            - name: Копирование папки conf на удаленный сервер
              synchronize:
                  src: "./conf"
                  dest: "{{ PATH_NEXTCLOUD_CONF }}"
                  delete: yes

            - name: Создание файла из шаблона
              template:
                  src: "./conf/db.j2"
                  dest: "{{ PATH_NEXTCLOUD_CONF }}/conf/.env"

      - name: Настройка SSL сертификата
        block:
            - name: Проверка наличия SSL-сертификата
              stat:
                  path: "{{ item }}"
              register: ssl_cert_files
              failed_when: false
              loop:
                  - "{{ PATH_NEXTCLOUD_DATA }}/ssl/private_key"
                  - "{{ PATH_NEXTCLOUD_DATA }}/ssl/certificate.crt"

            - name: Создать SSL сертификат
              shell: "mkdir -p {{ PATH_NEXTCLOUD_DATA }}/ssl && openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout {{ PATH_NEXTCLOUD_DATA }}/ssl/private_key -out {{ PATH_NEXTCLOUD_DATA }}/ssl/certificate.crt -subj '/C=RU'"
              when: not ssl_cert_files.results[0].stat.exists or not ssl_cert_files.results[1].stat.exists

      - name: Настройка docker-compose
        block:
            - name: Установка Docker
              import_tasks: ../script/docker_install.yml

            - name: Проверка наличия SSL-сертификата
              stat:
                  path: "{{ PATH_NEXTCLOUD_DATA }}/nextcloud/config/config.php"
              register: stat_config_php
              failed_when: false

            - name: Разрешить все подключения от разных доменных имен в файле config.php
              ansible.builtin.replace:
                  path: "{{ PATH_NEXTCLOUD_DATA }}/nextcloud/config/config.php"
                  regexp: "^(\\s*'trusted_domains'\\s*=>).*"
                  replace: "\\1 array(0 => '*'),"
              when: stat_config_php.stat.exists

            - name: Остановить docker-compose
              command: docker-compose down
              args:
                  chdir: "{{ PATH_NEXTCLOUD_CONF }}/conf"

            - name: Сборка docker-compose
              command: docker-compose build
              args:
                  chdir: "{{ PATH_NEXTCLOUD_CONF }}/conf"

            # - name: Запуск docker-compose
            #   command: docker-compose up -d
            #   args:
            #     chdir: "{{ PATH_NEXTCLOUD_CONF }}/conf"

      - name: Добавление docker-compose в автозапуск systemd
        block:
            - name: Создание службы docker-compose
              template:
                  src: "./conf/docker-compose.service.j2"
                  dest: "/etc/systemd/system/nextcloudserver_docker_compose.service"

            - name: Reload systemd
              systemd:
                  daemon_reload: yes

            - name: Включение и запуск службы docker-compose
              systemd:
                  name: nextcloudserver_docker_compose
                  state: started
                  enabled: yes

      - name: Изменение config.php в первый раз
        block:
            - name: Разрешить все подключения от разных доменных имен в файле config.php
              ansible.builtin.replace:
                  path: "{{ PATH_NEXTCLOUD_DATA }}/nextcloud/config/config.php"
                  regexp: "^(\\s*'trusted_domains'\\s*=>).*"
                  replace: "\\1 array(0 => '*'),"

            - name: Остановить docker-compose
              command: docker-compose down
              args:
                  chdir: "{{ PATH_NEXTCLOUD_CONF }}/conf"

            - name: Запуск docker-compose
              command: docker-compose up -d
              args:
                  chdir: "{{ PATH_NEXTCLOUD_CONF }}/conf"
        when: not stat_config_php.stat.exists
